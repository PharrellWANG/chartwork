#include <chartwork/ColorPalette.h>

#include <chartwork/Design.h>

namespace chartwork
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ColorPalette
//
////////////////////////////////////////////////////////////////////////////////////////////////////

ColorPalette::ColorPalette()
:	m_colors(std::shared_ptr<QList<QColor>>(new QList<QColor>(
	{
		design::blue,
		design::orange,
		design::green,
		design::purple,
		design::red,
		design::yellow,
		design::brown,
		design::gray
	})))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color0() const
{
	return (*m_colors)[0];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor0(const QColor &color0)
{
	(*m_colors)[0] = color0;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color1() const
{
	return (*m_colors)[1];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor1(const QColor &color1)
{
	(*m_colors)[1] = color1;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color2() const
{
	return (*m_colors)[2];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor2(const QColor &color2)
{
	(*m_colors)[2] = color2;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color3() const
{
	return (*m_colors)[3];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor3(const QColor &color3)
{
	(*m_colors)[3] = color3;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color4() const
{
	return (*m_colors)[4];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor4(const QColor &color4)
{
	(*m_colors)[4] = color4;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color5() const
{
	return (*m_colors)[5];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor5(const QColor &color5)
{
	(*m_colors)[5] = color5;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color6() const
{
	return (*m_colors)[6];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor6(const QColor &color6)
{
	(*m_colors)[6] = color6;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const QColor &ColorPalette::color7() const
{
	return (*m_colors)[7];
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void ColorPalette::setColor7(const QColor &color7)
{
	(*m_colors)[7] = color7;
	handleColorUpdate();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
